import React, { useEffect,useState } from 'react';
import '../CSS/Employee_Appraisal_History.css';
import { Button, Input } from 'reactstrap';
import { getReq } from '../Api/api';
import { useLocation } from "react-router-dom";
import { handleErrorToast, handleSuccessToast } from './Toast';

function  Employee_Appraisal_History() {
  
  const location=useLocation()
  console.log(location)
  let url=process.env.REACT_APP_URL;
  let id=location.state;
const [name,setname]=useState("");
const [empid,setempid]=useState('');
const[role,setrole]=useState('');
const[bussunit,setbuss]=useState('');
const [L1manager,setL1manager]=useState('');
const[L2manager,setL2manager]=useState('')
const[data,setdata]=useState()

const [questionsArray, setQuestionsArray] = useState([]);
const [showForm, setshowForm]=useState(false)
const [selectedFile, setSelectedFile] = useState(Array(questionsArray.length).fill(null));
const [editForm, setEditForm] = useState(false);
const [disabled, setDisabled]= useState(true);

const handleFileChange = (event, questionIndex) => {
  // Handle the selected file here
  const file = event.target.files[0];
  setSelectedFile(prevSelectedFiles => {
    const newSelectedFiles = [...prevSelectedFiles];
    newSelectedFiles[questionIndex] = file;
    return newSelectedFiles;
  });
};

const handleQuestionTextAreaChange = (event, questionIndex) => {
  const value = event.target.value;
  setQuestionsArray((prevQuestionsArray) => {
    const newQuestionsArray = [...prevQuestionsArray];
    newQuestionsArray[questionIndex].question = value;
    return newQuestionsArray;
  });
};

const handleEmployeeTextAreaChange = (event, questionIndex) => {
  const value = event.target.value;
  setQuestionsArray((prevQuestionsArray) => {
    const newQuestionsArray = [...prevQuestionsArray];
    newQuestionsArray[questionIndex].employeeComments = value;
    return newQuestionsArray;
  });
};

const handleManagerTextAreaChange = (event, questionIndex) => {
  const value = event.target.value;
  setQuestionsArray((prevQuestionsArray) => {
    const newQuestionsArray = [...prevQuestionsArray];
    newQuestionsArray[questionIndex].managerComments = value;
    return newQuestionsArray;
  });
};

const handleAdditionalTextAreaChange = (event, questionIndex) => {
  const value = event.target.value;
  setQuestionsArray((prevQuestionsArray) => {
    const newQuestionsArray = [...prevQuestionsArray];
    newQuestionsArray[questionIndex].additionalComments = value;
    return newQuestionsArray;
  });
};

const handleEmployeeSelectChange = (event, questionIndex) => {
  const value = event.target.value;
  setQuestionsArray((prevQuestionsArray) => {
    const newQuestionsArray = [...prevQuestionsArray];
    newQuestionsArray[questionIndex].employeeRating = parseInt(value, 10);
    return newQuestionsArray;
  });
};

const handleManagerSelectChange = (event, questionIndex) => {
  const value = event.target.value;
  setQuestionsArray((prevQuestionsArray) => {
    const newQuestionsArray = [...prevQuestionsArray];
    newQuestionsArray[questionIndex].managerRating = parseInt(value, 10);
    return newQuestionsArray;
  });
};

const handleSave = () => {
  let disabled = questionsArray?.filter(obj=>obj.employeeComments==="")

  const apiEndpoint = 'http://localhost:8282/api/sa/submit';
  console.log(JSON.stringify(questionsArray));
  if (disabled.length>0) { 
    handleErrorToast("please fill all questions")
   } 
   else { 
    let appraisalMasterId = appraisalData?.id
    let questionsArrayData=questionsArray.map((obj)=>{  obj.appraisalMasterId = appraisalData?.id 
  return obj}) 
  // Make API call to save the entire questionsArray
  fetch(apiEndpoint, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(questionsArrayData),
  })
  .then(response => response.json())
  .then(data => {
    handleSuccessToast("Succesfully submitted your comments")
    console.log('Data saved successfully:', data);
    // Additional logic or state updates if needed
  })
  .catch(error => {
    console.error('Error saving data:', error);
    handleErrorToast("Data has not been saved!");
  });
}
};

const handleEdit = () => {
  setEditForm(!editForm);
}

// const isEditSaveDisabled = questionsArray.some(
//   (item) =>
//     item.question.trim().length === 0 ||
//     (item.managerComments === 0) ||
//     (item.employeeComments === 0)
// );

const handleDeleteRow = (questionIndex) => {
  if (questionsArray.length <= 5) {
    // Prevent deletion if there are 5 or fewer rows
    alert('Minimum 5 rows are required.');
    return;
  }

  setQuestionsArray((prevQuestionsArray) => {
    const newQuestionsArray = [...prevQuestionsArray];
    newQuestionsArray.splice(questionIndex, 1);
    return newQuestionsArray;
  });

  setSelectedFile((prevSelectedFiles) => {
    const newSelectedFiles = [...prevSelectedFiles];
    newSelectedFiles.splice(questionIndex, 1);
    return newSelectedFiles;
  });
};



useEffect(() => {
  // Fetch data from the API endpoint
  fetch('http://localhost:8282/api/sa/get-all-rows')
    .then(response => response.json())
    .then(data => {
      // Update state with fetched data
      setQuestionsArray(data);
      // Initialize selectedFile array with null values for each question
      setSelectedFile(Array(data.length).fill(null));
      console.log(data, "GET CALL LOGS::::")
    })
    .catch(error => console.error('Error fetching data:', error));
}, []);



const fetchdata=async(id)=>{
    await getReq('http://localhost:8282/login/getby?id=6        ')
    .then(response=>{console.log(response)
      setname(response.data.name)
      setempid(response.data.employeeId)
      setrole(response.data.department)
      setbuss(response.data.bussinessunit)
    console.log(response.  data.name)})
    .catch(error=>{
      console.log(error)
    })
    
    }
    const l1manager=async()=>{
      await getReq('http://localhost:8282/managers?Id=6')
      .then(response=>{console.log(response.data[0])
        setL1manager(response.data[0])
      // console.log(response.  data.name)
    })
      .catch(error=>{
        console.log(error)
      })
      .catch((error) => {
        console.log(error);
      });
  };
 const handlePrintClick = () => {
    window.print();
  };

  // const l1manager = async () => {
  //   await getReq(`${url}managers?Id=${id}`)
  //     .then((response) => {
  //       console.log(response.data[0]);
  //       setL1manager(response.data[0]);
  //       // console.log(response.  data.name)
  //     })
  //     .catch((error) => {
  //       console.log(error);
  //     });
  // };
  const l2manager = async () => {
    await getReq(`${url}l2managers?Id=6`)
      .then((response) => {
        console.log(response.data[0]);
        setL2manager(response.data[0]);

        // console.log(response.  data.name)
      })
      .catch((error) => {
        console.log(error);
      });
  };
  const tabledata = async () => {
    await getReq(`${url}appraisalhistroy/get/3`)
      .then((response) => {
        console.log(response.data);
        setdata(response.data);

        // console.log(response.  data.name)
      })
      .catch((error) => {
        console.log(error);
      });
  };

  const [appraisalData , setAppraisalData]= useState(null) 

  useEffect(()=>{
   
  if(appraisalData?.status=="EmployeeSubmitted"){
   
        let appraisalMasterId = appraisalData?.id
    PerformanceManagement.getAllSelfAssessmentData(appraisalMasterId).then((response) => {
      setQuestionsArray(response.data)
       console.log(response.data);
    })
    showForm(true)
       setEditForm(true)
       setDisabled(false)
      
  }
    
  if(appraisalData?.status=="ManagerSubmitted" ||(appraisalData?.status=="EmployeeEscalated")|  appraisalData?.status=="Closed"){
    showForm(true)
   
    let appraisalMasterId = appraisalData?.id
    PerformanceManagement.getAllSelfAssessmentData(appraisalMasterId).then((response) => {
      setQuestionsArray(response.data)
       console.log(response.data);
    })

         
  }

  else {
        

  }
  

  },[appraisalData])


  useEffect(() => {
    fetchdata();
    l1manager();
    l2manager();
    tabledata();
    getAppraisalsByuserId()
  }, []);

  const getAppraisalsByuserId = async ()=>{
    let data= await getList(`http://localhost:8282/api/sa/am-status/${select[0].id}`)
    console.log(data)
    setAppraisalData(data);
    }

  return (
    <div className="container main-content">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item">
            <a href="#">Home</a>
          </li>
          <li class="breadcrumb-item active" aria-current="page">
            My Appraisal History
          </li>
        </ol>
      </nav>

       { showForm ? 
      <div className="app_history_container_content">
        <div>
          <div className="card card_content">
            <div className="card-body">
              <div className="Appraisal_status">
                <div>
                  <span className="card-title">
                    Appraisal Status:{" "}
                    <span className="appraisal_status">
                      {data && data[0].status}
                    </span>
                  </span>
                </div>
                <div className="print_icon" onClick={handlePrintClick}>
                  <i class="fa fa-print  " aria-hidden="true">
                    {" "}
                    Print
                  </i>
                </div> 
              </div>
              <div className="row">
                <div className="col-md-4">
                  <div class="profile-info">
                    <div class="profile-icon">
                      <svg
                        width="50"
                        height="50"
                        viewBox="0 0 50 50"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <circle cx="25" cy="25" r="25" fill="#FE4D93" />
                        <text
                          x="50%"
                          y="50%"
                          dominant-baseline="middle"
                          text-anchor="middle"
                          fill="white"
                        >
                       { name
                           .split(' ')
                            .map(part => part.charAt(0))
                           .join('')}
                        </text>
                      </svg>
                    </div>
                    <div class="profile-details">
                      <p className="Profile_name">{name}</p>
                      <p className="profile_silid"> {empid}</p>
                      <p> {role}</p>
                      <p> Bussiness Unit:{bussunit}</p>
                    </div>
                    <div class="vl"></div>
                  </div>
                </div>

                <div class="col-md-8 profile-content">
                  <span className="comment_view">
                    Appraisal Rating: 3 Consistenly meet expectations{" "}
                  </span>
                  <span className="comment">(view comment) </span>
                  <div class="Profile_comment">
                    <div className="l1_managercontent">
                      <div className="d-flex">
                        <span className="manager_content">L1 Manager:</span>
                        <span className="name">{L1manager}</span>
                      </div>
                      <div className="d-flex">
                        <span className="manager_content">Rating: </span>{" "}
                        <span>3</span>
                      </div>
                    </div>
                    <div className="l1_managercontent">
                      <div className="d-flex">
                        <span className="manager_content">L2 Manager:</span>{" "}
                        <span className="name">{L2manager}</span>
                      </div>
                      <div className="d-flex">
                        <span className="manager_content">Rating: </span>{" "}
                        <span>3</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        {editForm === false ? (
          <div>
            <div className="col-md-12 appraisal_table">
              <table className="table self_assessment_table">
                <thead>
                  <tr>
                    <th className='table_heading' style={{ wquestionIdth: "14%" }}>Questions</th>
                    <th className='table_heading' style={{ wquestionIdth: "20%" }}>Employee Comments</th>
                    <th className='table_heading' style={{ wquestionIdth: "9%" }}>Rating</th>
                    <th className='table_heading' style={{ wquestionIdth: "20%" }}>Manager Comments</th>
                    <th className='table_heading' style={{ wquestionIdth: "9%" }}>Rating</th>
                    <th className='table_heading' style={{ wquestionIdth: "20%" }}>Additional Comments</th>
                    <th className='table_heading' style={{ wquestionIdth: "8%" }}>Attach Document</th>
                  </tr>
                </thead>
                <tbody className='table_body'>
                  {questionsArray.map((questionItem, index) => (
                    <tr key={questionItem.questionId}>
                      <td>{questionItem.question}</td>
                      <td>
                        <p>{questionItem.employeeComments}</p>
                      </td>
                      <td>
                        <p>{questionItem.employeeRating}</p>
                      </td>
                      <td>
                        <p>{questionItem.managerComments}</p>
                      </td>
                      <td>
                        <p>{questionItem.managerRating}</p>
                      </td>
                      <td>
                        <p>{questionItem.additionalComments}</p>
                      </td>
                      <td>
                        <p>{selectedFile[index] && <span>{selectedFile[index].name}</span>}</p>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
              <div className='form_buttons p-3 px-4' style={{ textAlign: 'right' }}>
                <Button className='fw-semibold mx-2' color='secondary' onClick={handleEdit}>Edit</Button>
                {/* <Button className='mx-2 fw-semibold' color='link'>Save as Draft</Button> */}
                <Button className='fw-semibold' color='success' onClick={handleSave}>Submit</Button>
              </div>
            </div>
          </div>
        ) : (
        <div>
          <div className="col-md-12 appraisal_table">
            <table className="table self_assessment_table">
              <thead>
                <tr>
                  <th className='table_heading' style={{ wquestionIdth: "20%" }}>Questions</th>
                  <th className='table_heading' style={{ wquestionIdth: "20%" }}>Employee Comments</th>
                  <th className='table_heading' style={{ wquestionIdth: "6%" }}>Rating</th>
                  <th className='table_heading' style={{ wquestionIdth: "20%" }}>Manager Comments</th>
                  <th className='table_heading' style={{ wquestionIdth: "6%" }}>Rating</th>
                  <th className='table_heading' style={{ wquestionIdth: "20%" }}>Additional Comments</th>
                  <th className='table_heading' style={{ wquestionIdth: "8%" }}>Attach Document</th>
                  <th className='table_heading' style={{ wquestionIdth: "8%" }}>Actions</th>
                </tr>
              </thead>
              <tbody className='table_body'>
                {questionsArray.map((questionItem, index) => (
                  <tr key={questionItem.questionId}>
                    <td>
                      <Input
                        // questionId="exampleText"
                        name="text"
                        type="textarea"
                        value={questionItem.question}
                        onChange={(event) => handleQuestionTextAreaChange(event, index)}
                        rows={4}
                      ></Input>
                    </td>
                    <td>
                      <Input
                        // questionId="exampleText"
                        name="text"
                        type="textarea"
                        value={questionItem.employeeComments}
                        onChange={(event) => handleEmployeeTextAreaChange(event, index)}
                        rows={4}
                        disabled
                      ></Input>
                    </td>
                    <td>
                      <select
                        className='rating_filter'
                        value={questionItem.employeeRating}
                        onChange={(event) => handleEmployeeSelectChange(event, index)}
                        disabled
                      >
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                      </select>
                    </td>
                    <td>
                      <Input
                        // questionId="exampleText"
                        name="text"
                        type="textarea"
                        value={questionItem.managerComments}
                        onChange={(event) => handleManagerTextAreaChange(event, index)}
                        rows={4}
                      ></Input>
                    </td>
                    <td>
                      <select
                        className='rating_filter'
                        value={questionItem.managerRating}
                        onChange={(event) => handleManagerSelectChange(event, index)}
                      >
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                      </select>
                    </td>
                    <td>
                      <Input
                        // questionId="exampleText"
                        name="text"
                        type="textarea"
                        value={questionItem.additionalComments}
                        onChange={(event) => handleAdditionalTextAreaChange(event, index)}
                        rows={4}
                      ></Input>
                    </td>
                    <td>
                      <label htmlFor={`fileUpload-${questionItem.questionId}`} className="btn btn-outline-secondary" style={{ cursor: 'pointer', marginRight: '10px' }}>
                        <i className="bi bi-paperclip"></i>
                      </label>
                      <Input
                        type="file"
                        questionId={`fileUpload-${questionItem.questionId}`}
                        style={{ display: 'none' }}
                        onChange={(event) => handleFileChange(event, index)}
                        className="form-control"
                      />
                      {selectedFile[index] && <span>{selectedFile[index].name}</span>}
                    </td>
                    <td>
                      <i class="bi bi-trash3 trash_icon" onClick={() => handleDeleteRow(index)}></i>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            <div className='form_buttons p-3 px-4' style={{ textAlign: 'right' }}>
              <Button className='fw-semibold mx-2' questionId='edit_save_btn' color='secondary' onClick={handleEdit} >Save</Button>
              {/* <Button className='mx-2 fw-semibold' color='link'>Save as Draft</Button> */}
              <Button className='fw-semibold' color='success' onClick={handleSave} disabled={disabled}>Submit</Button>
            </div>
          </div>
        </div>
        )}




      </div> : (<h1>Employee Yet to submit his Appraisal</h1>)}
    </div>
  );
}

export default Employee_Appraisal_History;